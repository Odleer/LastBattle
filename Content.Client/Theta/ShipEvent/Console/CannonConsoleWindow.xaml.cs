using System.Reflection.Emit;
using Content.Client.Computer;
using Content.Client.Items;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Inventory.Controls;
using Content.Shared.IdentityManagement;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared.Theta.ShipEvent.Console;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Label = Robust.Client.UserInterface.Controls.Label;

namespace Content.Client.Theta.ShipEvent.Console;

[GenerateTypedNameReferences]
public sealed partial class CannonConsoleWindow : FancyWindow,
    IComputerWindow<CannonConsoleBoundInterfaceState>
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private List<CannonInformationInterfaceState> _controlledCannons = new();

    private Dictionary<EntityUid, ItemStatusPanel> _statusPanels = new();

    public CannonConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(CannonConsoleBoundInterfaceState scc)
    {
        RadarScreen.UpdateState(scc);
        _controlledCannons = scc.Cannons;
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        RadarScreen.SetMatrix(coordinates, angle);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        UpdateAmmo();
    }

    public override void Close()
    {
        AmmoStatusContents.RemoveAllChildren();
        base.Close();
    }

    protected override void Dispose(bool disposing)
    {
        AmmoStatusContents.RemoveAllChildren();
        base.Dispose(disposing);
    }

    private void InitStatusPanels()
    {
        foreach (var cannonInformation in _controlledCannons)
        {
            var panel = new ItemStatusPanel();
            _statusPanels[cannonInformation.Uid] = panel;
            AmmoStatusContents.AddChild(panel);
        }
    }

    private void UpdateAmmo()
    {
    //     foreach (var Uid in _controlledCannons)
    //     {
    //         // var label = new Label()
    //         // {
    //         //     ClipText = true,
    //         //     StyleClasses = { "ItemStatus" },
    //         //     Text = Identity.Name(Uid, _entityManager),
    //         // };
    //         // AmmoStatusContents.AddChild(label);
    //         //
    //         // var collectMsg = new ItemStatusCollectMessage();
    //         // _entityManager.EventBus.RaiseLocalEvent(Uid, collectMsg, true);
    //         //
    //         // foreach (var control in collectMsg.Controls)
    //         // {
    //         //     AmmoStatusContents.AddChild(control);
    //         // }
    //     }

    if (_statusPanels.Count == 0)
    {
        InitStatusPanels();
    }

        foreach (var (uid, panel) in _statusPanels)
        {
            panel.Update(uid);
        }
    }
}
