using System.Linq;
using Content.Client.Message;
using Content.Client.Theta.ModularRadar.Modules.ShipEvent;
using Content.Shared.Theta.ShipEvent.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;

namespace Content.Client.Theta.ShipEvent.Console;

[GenerateTypedNameReferences]
public sealed partial class CircularShieldConsoleWindow : DefaultWindow
{
    public event Action<int, int, int>? OnParametersChanged;

    public event Action? OnEnableButtonPressed;

    public int Angle => ShieldAngleSlider.Value;
    public int ShieldWidth => ShieldWidthSlider.Value;
    public int Radius => ShieldRadiusSlider.Value;

    public CircularShieldConsoleWindow()
    {
        RobustXamlLoader.Load(this);

        ShieldEnableButton.OnPressed += _ => OnEnableButtonPressed?.Invoke();

        ShieldAngleSlider.OnValueChanged += _ => OnParametersChanged?.Invoke(Angle, ShieldWidth, Radius);
        ShieldWidthSlider.OnValueChanged += _ => OnParametersChanged?.Invoke(Angle, ShieldWidth, Radius);
        ShieldRadiusSlider.OnValueChanged += _ => OnParametersChanged?.Invoke(Angle, ShieldWidth, Radius);

        if (RadarScreen.TryGetModule<RadarShieldStatus>(out var shieldModule))
        {
            OnParametersChanged += shieldModule.UpdateShieldParameters;
        }
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        RadarScreen.SetMatrix(coordinates, angle);
    }

    public void SetOwner(EntityUid uid)
    {
        RadarScreen.SetOwnerUid(uid);
    }

    public void UpdateState(ShieldConsoleBoundsUserInterfaceState shieldState)
    {
        if(!shieldState.Shield.IsControlling)
            return;
        RadarScreen.UpdateState(shieldState);

        var state = shieldState.Shield;
        ShieldAngleSlider.Value = (int) state.Angle.Degrees;

        ShieldWidthSlider.Value = (int) state.Width.Degrees;
        ShieldWidthSlider.MaxValue = state.MaxWidth;

        ShieldRadiusSlider.Value = state.Radius;
        ShieldRadiusSlider.MaxValue = state.MaxRadius;

        ShieldPowerStatusLabel.SetMarkup(Loc.GetString(state.Powered ? "shipevent-shieldconsole-powered" : "shipevent-shieldconsole-nopower"));
    }
}
