using Content.Client.Message;
using Content.Client.Theta.ModularRadar.Modules;
using System.Numerics;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Physics.Components;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class NavScreen : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private SharedTransformSystem _xformSystem;

    private EntityUid? _shuttleEntity;
    private EntityUid _ownerUid;

    public event Action<string>? ChangeNamePressed;
    public event Action? StealthButtonPressed;

    public NavScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _xformSystem = _entManager.System<SharedTransformSystem>();

        if (NavRadar.TryGetModule<RadarGrids>(out var grids))
        {
            IFFToggle.OnToggled += OnIFFTogglePressed;
            IFFToggle.Pressed = grids.ShowIFF;
        }

        if (NavRadar.TryGetModule<RadarDocks>(out var docks))
        {
            DockToggle.OnToggled += OnDockTogglePressed;
            DockToggle.Pressed = docks.ShowDocks;
        }

        ChangeNameShip.OnPressed += OnChangeNamePressed;

        StealthButton.OnPressed += _ =>
        {
            SetStealthStatus(false);
            StealthButtonPressed?.Invoke();
        };
    }

    private void OnChangeNamePressed(BaseButton.ButtonEventArgs args)
    {
        ChangeName();
        ShipName.Text = String.Empty;
    }

    private void ChangeName()
    {
        var name = ShipName.Text;
        if (string.IsNullOrWhiteSpace(name))
            return;
        if (name.Length is > 25 or < 3)
            return;

        ChangeNamePressed?.Invoke(name);
    }

    public void SetShuttle(EntityUid? shuttle)
    {
        _shuttleEntity = shuttle;
    }

    public void SetConsole(EntityUid consoleUid)
    {
        NavRadar.SetOwnerUid(consoleUid);
        _ownerUid = consoleUid;
    }

    private void OnIFFTogglePressed(BaseButton.ButtonEventArgs args)
    {
        if (NavRadar.TryGetModule<RadarGrids>(out var grids))
        {
            grids.ShowIFF ^= true;
            args.Button.Pressed = grids.ShowIFF;
        }
    }

    private void OnDockTogglePressed(BaseButton.ButtonEventArgs args)
    {
        if (NavRadar.TryGetModule<RadarDocks>(out var docks))
        {
            docks.ShowDocks ^= true;
            args.Button.Pressed = docks.ShowDocks;
        }
    }

    public void UpdateState(NavInterfaceState scc)
    {
        /*
         * THETA:
         * Я заменил NavScreen на крутой ShuttleModularRadar, которому нужно больше данных, чем просто NavInterfaceState
         */
        // NavRadar.UpdateState(scc);
        UpdateNameInputPlaceholder();
    }

    public void UpdateState(BoundUserInterfaceState scc)
    {
        NavRadar.UpdateState(scc);
        UpdateNameInputPlaceholder();
    }

    public void UpdateNameInputPlaceholder()
    {
        var metaQuery = _entManager.GetEntityQuery<MetaDataComponent>();
        if (_shuttleEntity != null)
        {
            var name = metaQuery.GetComponent(_shuttleEntity.Value).EntityName;
            if (name == string.Empty)
                name = Loc.GetString("shuttle-console-unknown");
            ShipName.PlaceHolder = name;
        }
    }

    public void SetStealthStatus(bool ready)
    {
        if (ready)
        {
            StealthStatus.SetMarkup(Loc.GetString("shipevent-shuttleconsole-stealth-ready"));
            StealthButton.Disabled = false;
        }
        else
        {
            StealthStatus.SetMarkup(Loc.GetString("shipevent-shuttleconsole-stealth-recharging"));
            StealthButton.Disabled = true;
        }
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        _shuttleEntity = coordinates?.EntityId;
        NavRadar.SetMatrix(coordinates, angle);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (!_entManager.TryGetComponent(_shuttleEntity, out TransformComponent? gridXform) ||
            !_entManager.TryGetComponent(_shuttleEntity, out PhysicsComponent? gridBody))
        {
            return;
        }

        var (_, worldRot, worldMatrix) = _xformSystem.GetWorldPositionRotationMatrix(gridXform);
        var worldPos = Vector2.Transform(gridBody.LocalCenter, worldMatrix);

        // Get the positive reduced angle.
        var displayRot = -worldRot.Reduced();

        GridPosition.Text = $"{worldPos.X:0.0}, {worldPos.Y:0.0}";
        GridOrientation.Text = $"{displayRot.Degrees:0.0}";

        var gridVelocity = gridBody.LinearVelocity;
        gridVelocity = displayRot.RotateVec(gridVelocity);
        // Get linear velocity relative to the console entity
        GridLinearVelocity.Text = $"{gridVelocity.X + 10f * float.Epsilon:0.0}, {gridVelocity.Y + 10f * float.Epsilon:0.0}";
        GridAngularVelocity.Text = $"{-gridBody.AngularVelocity + 10f * float.Epsilon:0.0}";
    }
}
